# everytime we push new code to Github master, Travis will clone all code then use these directions to build 
# our docker image, run tests, then report on whether tests failed or passed
# hey Travis we need super user permissions to execute this build
sudo: required

language: php

# travis needs to know we have the docker cli pre-installed, travis will install docker into our running container
services:
  - docker

# steps or setup before tests are run or deployment, etc (basically build our image)
before_install:
  # builds the image, names it (can be anything - will only be used by Travis), make it use the Dockerfile.dev file 
  # (not PROD Dockerfile cuz this is for testing)
  - docker build -t morgenes23/php-docker -f .docker .
  - docker run morgenes23/php-docker

# commands necessary to run our test suite - Travis will be watching the output of these and if any get a
# return status code other than 0, Travis will assume code is broken, need -- --coverage to make test script exit
# cuz by default it will hang and wait for user input
#script:
  #- docker run morgenes23/php-docker # npm run test -- --coverage
  # - script for running cucumber tests

# this portion will tell Travis to deploy to AWS
deploy:
  # Travis comes pre-configured to deploy to a handful of providers
  provider: elasticbeanstalk
  # region depends on where you originally created EB instance (found in URL on EB dashboard - Docker-env.fznyypimpj.us-east-2.elasticbeanstalk.com)
  region: "us-east-2"
  # name of app, same name as created in EB dashboard (take it letter for letter)
  app: "php-docker"
  # environment name (Docker-env)
  env: "PhpDocker-env"
  # when Travis gets all your code into 1 zip file, copies it into an S3 bucket which is bucket_name, found under Services top nav, go to S3, find region (us-east-2), get full name 
  bucket_name: "elasticbeanstalk-us-east-2-218183310905"
  # same as app name - folder won't be created in S3 until the first deploy
  bucket_path: "php-docker"
  # only deploy when master branch is pushed (not a feature branch)
  on:
    branch: master
  # search iam in AWS (Identity and Access Management), link API keys to TravisCI from AWS -> Users (will be used by 
  # TravisCI -> add user -> username: docker-react-travis-ci (anything) -> check Programmatic access box -> don't 
  # check AWS Managment Console access) -> Next -> Attach existing policies directly (permissions) -> search beanstalk
  # -> check box next to "Provides full access to AWS Elastic..." -> Next -> Create User -> secret access key will
  # only be shown 1 time (copy it down!)
  # Go to Travis CI dashboard of project, More Options, Settings, Environment variables section -> Travis CI will
  # encrypt and store secret key and access key -> create AWS_ACCESS_KEY and AWS_SECRET_KEY -> Add
  
  # tell Travis to get the keys from local environment config
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: "$AWS_SECRET_KEY"

  # push code to GH, Travis build will be successful, but in EB on AWS it will spin and spin (because we didnt
  # do any port mapping with EB - see Dockerfile line right under FROM nginx)